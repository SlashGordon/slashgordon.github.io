<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on my private blog</title>
    <link>/tags/golang/</link>
    <description>Recent content in golang on my private blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2019</copyright>
    <lastBuildDate>Wed, 18 Jun 2025 01:53:34 +0800</lastBuildDate>
    
	<atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Solving Let&#39;s Encrypt Challenges with SCP for Limited Web Hosting</title>
      <link>/post/acme_scp_solver/</link>
      <pubDate>Wed, 18 Jun 2025 01:53:34 +0800</pubDate>
      
      <guid>/post/acme_scp_solver/</guid>
      <description>The Problem: Limited Domain Hosting Without API Access If you&amp;rsquo;ve ever tried to set up SSL certificates with Let&amp;rsquo;s Encrypt on a domain hosting provider that doesn&amp;rsquo;t offer API access, you know the struggle. My situation was particularly challenging:
 My domain is hosted with a provider that doesn&amp;rsquo;t offer any API for automated certificate management My web space is limited, making it difficult to run a full ACME client directly on the server I needed to automate the certificate renewal process to avoid manual intervention every 90 days  The standard approach for Let&amp;rsquo;s Encrypt validation is to place a specific challenge file in the .</description>
    </item>
    
    <item>
      <title>Use golang library with python</title>
      <link>/post/python_wrapper_for_golang/</link>
      <pubDate>Sun, 09 Jan 2022 01:53:34 +0800</pubDate>
      
      <guid>/post/python_wrapper_for_golang/</guid>
      <description>&lt;p&gt;A few weeks ago I wrote URL tokenizer in Python and the code was very similar to a Go project.
I invested some hours to find out a solution to use the Go code in python and here are my results.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>